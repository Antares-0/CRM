package com.powernode.crm.workbench.mapper;

import com.powernode.crm.workbench.domain.Activity;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import javax.management.ObjectName;
import java.util.List;
import java.util.Map;


public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu May 05 21:40:27 CST 2022
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu May 05 21:40:27 CST 2022
     */
    int insertActivity(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu May 05 21:40:27 CST 2022
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu May 05 21:40:27 CST 2022
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu May 05 21:40:27 CST 2022
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Thu May 05 21:40:27 CST 2022
     */
    int updateByPrimaryKey(Activity record);

    /**
     * 根据条件查询活动
     * @param map
     * @return
     */
    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);
    /**
     * 计数查询
     * @param map
     * @return
     */
    int selectCountOfActivityByCondition(Map<String, Object> map);

    /**
     * 根据ids批量删除
     * @param ids
     * @return
     */
    int deleteActivityByIds(String[] ids);


    /**
     * 根据id查活动
     * @param id
     * @return
     */
    Activity selectActivityById(String id);


    /**
     * 根据id进行修改
     * @param activity
     * @return
     */
    int updateActivityById(Activity activity);


    /**
     * 查询所有的市场活动
     * @return
     */
    List<Activity> selectAllActivity();


    /**
     * 选择id
     * @return
     */
    List<Activity> selectActivityByIds(String[] ids);


    /**
     * 插入很多活动
     * @param list
     * @return
     */
    int insertActivityByList(List<Activity> list);


    /**
     * 根据id查询市场活动的明细信息
     * @param id
     * @return
     */
    Activity selectActivityForDetailById(String id);


    /**
     * 根据clueId查询该线索相关联的市场活动的明细信息
     * @param id
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String id);

    /**
     * 选择Clue
     * @return
     */
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据ids查
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 模糊查询关联了的市场活动
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameClueId(Map<String, Object> map);

    /**
     * 为创建交易，根据搜索的活动名称查询的活动名称
     * @param name
     * @return
     */
    List<Activity> selectActivityForTransactionByName(String name);


}